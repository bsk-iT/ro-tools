#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from events.base_event import BaseEvent, Priority
from game.map_buffs import DIC_STATUS_DEBUFF
import time

class AutoCompetitiveDetector(BaseEvent):
    """
    Detector de inst√¢ncia competitiva baseado na implementa√ß√£o do TalesTools.
    
    Monitora continuamente se o jogador est√° em uma inst√¢ncia competitiva (ID 5019)
    e para automaticamente todos os eventos quando detectado.
    
    Comportamento:
    - Priority.REALTIME: M√°xima prioridade para detec√ß√£o imediata
    - Verifica status a cada 100ms para resposta r√°pida
    - Para todos os eventos automaticamente quando detecta inst√¢ncia competitiva
    """

    def __init__(self, game_event):
        super().__init__(game_event, "AutoCompetitiveDetector", [])
        self.priority = Priority.REALTIME  # M√°xima prioridade
        self.last_competitive_state = False
        self.last_check_time = 0
        self.check_interval = 0.1  # 100ms para detec√ß√£o r√°pida

    def has_competitive_instance(self):
        """
        Verifica se o jogador est√° em uma inst√¢ncia competitiva.
        """
        try:
            for i in range(1, 65):  # M√°ximo de 64 buffs/debuffs
                status_id = self.game_event.char.status_debuff[i]
                if status_id == 5019:  # ID da inst√¢ncia competitiva
                    return True
            return False
        except (IndexError, AttributeError, TypeError):
            return False

    def execute(self):
        """
        Executa a verifica√ß√£o de inst√¢ncia competitiva com alta frequ√™ncia.
        """
        current_time = time.time()
        
        # Verifica apenas se passou o intervalo m√≠nimo
        if current_time - self.last_check_time < self.check_interval:
            return
            
        self.last_check_time = current_time
        
        try:
            is_competitive = self.has_competitive_instance()
            
            # Se mudou o estado, reage imediatamente
            if is_competitive != self.last_competitive_state:
                self.last_competitive_state = is_competitive
                
                if is_competitive:
                    print("üèÜ INST√ÇNCIA COMPETITIVA DETECTADA!")
                    print("‚ö†Ô∏è  Parando todos os eventos automaticamente...")
                    
                    # Para todos os eventos ativos
                    self.game_event.stop_all_events()
                    
                    # Log detalhado
                    print("üìã Status: Todos os eventos foram pausados devido √† inst√¢ncia competitiva")
                    print("üîÑ Os eventos ser√£o reativados automaticamente quando sair da inst√¢ncia")
                    
                else:
                    print("‚úÖ Saiu da inst√¢ncia competitiva")
                    print("üîÑ Eventos podem ser reativados normalmente")
                    
        except Exception as e:
            print(f"‚ùå Erro na detec√ß√£o de inst√¢ncia competitiva: {e}")

    def get_status_name(self, status_id):
        """
        Retorna o nome do status baseado no ID.
        """
        return DIC_STATUS_DEBUFF.get(str(status_id), f"unknown_status_{status_id}")

    def is_running(self):
        """
        Este detector deve estar sempre ativo para prote√ß√£o cont√≠nua.
        """
        return True

    def stop(self):
        """
        Para o detector (usado apenas quando o jogo √© fechado).
        """
        print("üõë Detector de inst√¢ncia competitiva parado")
        self.last_competitive_state = False